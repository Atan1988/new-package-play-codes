ws_card <- c(3, 2, 1)
first_ps <- grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = ps_card),
ws = ws_card)
ps[-1]
ps_card[-1]
ps_card[-2]
ps_card[-3]
ps_card <- c(0, 0.5, 1)
ws_card <- c(3, 2, 1)
first_ps <- grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = ps_card),
ws = ws_card)
second_ps <- list()
for (i in 1:3) {
second_ps[[i]] <- grid_search_generic(x= c(0), distr = 'bern', pars_df = data.frame(prob = ps_card[-i]),
ws = ws_card[-i])
}
second_ps
first_ps <- grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = ps_card),
ws = ws_card)
first_ps
ps_card <- c(0, 0.5, 1)
ws_card <- c(1, 1, 1)
first_ps <- grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = ps_card),
ws = ws_card)
first_ps
d_generic(0, distr = 'bern', probs = ps_card[-1]/leng(ps_card[-1]))
d_generic(0, distr = 'bern', parnames = 'prob', par_vars = ps_card[-1]/leng(ps_card[-1]))
d_generic(0, distr = 'bern', parnames = 'prob', parvars = ps_card[-1]/leng(ps_card[-1]))
d_generic(0, distr = 'bern', parnames = 'prob', parvars = ps_card[-1]/length(ps_card[-1]))
d_generic
?dbern
d_generic(x=0, distr = 'bern', parnames = 'prob', parvars = ps_card[-1]/length(ps_card[-1]))
for (i in 1:3) {
second_ps[[i]] <- grid_search_generic(x= c(0), distr = 'bern', pars_df = data.frame(prob = ps_card[-i]),
ws = ws_card[-i])
}
ps_card[-1]/length(ps_card[-1])
d_generic(x=0, distr = 'bern', parnames = 'prob', parvars = sum(ps_card[-1])/length(ps_card[-1]))
ps_card[-1]
sum(ps_card[-1])
first_ps <- grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = ps_card),
ws = ws_card)
second_ps <- unlist(lapply(1:3, function(i) d_generic(x=0, distr = 'bern', parnames = 'prob',
parvars = sum(ps_card[-i])/length(ps_card[-i])))
)
ps_card <- c(0, 0.5, 1)
ws_card <- c(1, 1, 1)
first_ps <- grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = ps_card),
ws = ws_card)
second_ps <- unlist(lapply(1:3, function(i) d_generic(x=0, distr = 'bern', parnames = 'prob',
parvars = sum(ps_card[-i])/length(ps_card[-i]))))
pos_prob <- first_ps * second_ps / sum(first_ps * second_ps)
ps_card <- c(0, 0.5, 1)
ws_card <- c(1, 1, 1)
first_ps <- grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = ps_card),
ws = ws_card)
second_ps <- unlist(lapply(1:3, function(i) d_generic(x=0, distr = 'bern', parnames = 'prob',
parvars = sum(ps_card[-i])/length(ps_card[-i]))))
first_ps * second_ps / sum(first_ps * second_ps)
(0.1 + 0.2) / 0.15
(0.1 + 0.2) / 2
grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = c(0.1, 0.2)),
ws = 1)
grid_search_generic(x= c(1, 0), distr = 'bern', pars_df = data.frame(prob = c(0.1, 0.2)),
ws = 1)
raw_prob <- c(0.8, 0.35) * c(0.5, 0.5) / sum(c(0.8, 0.35) * c(0.5, 0.5) )
pos_odds <- c(0.8, 0.35) * grid_search_generic(x= c(1, 0), distr = 'bern', pars_df = data.frame(prob = c(0.1, 0.2)),
ws = 1)
pos_odds / sum(pos_odds)
raw_prob <- c(0.8, 0.35) * c(0.5, 0.5) / sum(c(0.8, 0.35) * c(0.5, 0.5) )
raw_prob
pos_odds <- c(0.8, 0.35) * grid_search_generic(x= c(1, 0), distr = 'bern', pars_df = data.frame(prob = c(0.1, 0.2)),
ws = 1)
pos_odds / sum(pos_odds)
library(LaplacesDemon)
grid_search_binom <- function(ps, pws, W, N) {
pos_prob <- sapply(ps, dbinom, x = W, size = N) * pws
pos_prob / sum(pos_prob)
}
d_generic <- function( x, distr, parnames, parvars) {
d <- get(paste0("d", distr))
args_inte <- setNames(append(list(x),  lapply(parvars, identity)),
c("x", parnames))
do.call(d, args = args_inte)
}
grid_search_generic <- function(x, distr, pars_df, ws) {
pars_lst <- lapply(1:nrow(pars_df), function(i) t(pars_df[i, ])[, 1])
ds <- lapply(pars_lst, d_generic, x=x, distr = distr, parnames = colnames(pars_df))
pos_prob <- unlist(lapply(ds, prod)) * ws
pos_prob / sum(pos_prob)
}
ps <- seq(0, 1, 0.01)
plot(x = ps, y = grid_search_binom(ps, pws = rep(1, length(ps)), W=3, N = 3))
plot(x= ps,
y = grid_search_generic(x= c(1, 1, 1), distr = 'bern', pars_df = data.frame(prob = ps), ws = 1)
)
plot(x = ps, y = grid_search_binom(ps, pws = rep(1, length(ps)), W=3, N = 4))
plot(x= ps,
y = grid_search_generic(x= c(1, 1, 1, 0), distr = 'bern', pars_df = data.frame(prob = ps), ws = 1)
)
plot(x = ps, y = grid_search_binom(ps, pws = rep(1, length(ps)), W=5, N = 7))
plot(x= ps,
y = grid_search_generic(x= c(1, 1, 1, 1, 1, 0, 0), distr = 'bern', pars_df = data.frame(prob = ps), ws = 1)
)
plot(x= ps,
y = grid_search_generic(x= c(1, 1, 1), distr = 'bern', pars_df = data.frame(prob = ps),
ws = ifelse(ps < 0.5, 0, 1))
)
plot(x= ps,
y = grid_search_generic(x= c(1, 1, 1, 0), distr = 'bern', pars_df = data.frame(prob = ps),
ws = ifelse(ps < 0.5, 0, 1))
)
plot(x= ps,
y = grid_search_generic(x= c(1, 1, 1, 1, 1, 0, 0), distr = 'bern', pars_df = data.frame(prob = ps),
ws = ifelse(ps < 0.5, 0, 1))
)
grid_search_generic(x= c(0), distr = 'bern', pars_df = data.frame(prob = c(0.7, 0)),
ws = 1)
grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = c(0, 1, 0.5)),
ws = 1)
grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = c(0, 1, 0.5)),
ws = c(1, 2, 1))
grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = c(0, 1, 0.5)),
ws = c(3, 1, 2))
ps_card <- c(0, 0.5, 1)
ws_card <- c(1, 1, 1)
first_ps <- grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = ps_card),
ws = ws_card)
second_ps <- unlist(lapply(1:3, function(i) d_generic(x=0, distr = 'bern', parnames = 'prob',
parvars = sum(ps_card[-i])/length(ps_card[-i]))))
first_ps * second_ps / sum(first_ps * second_ps)
sum(grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = c(0.1, 0.2)),
ws = 1) * c(0.1, 0.2))
grid_search_generic(x= c(1), distr = 'bern', pars_df = data.frame(prob = c(0.1, 0.2)),
ws = 1)
grid_search_generic(x= c(1, 0), distr = 'bern', pars_df = data.frame(prob = c(0.1, 0.2)),
ws = 1)
raw_prob <- c(0.8, 0.35) * c(0.5, 0.5) / sum(c(0.8, 0.35) * c(0.5, 0.5) )
raw_prob
pos_odds <- c(0.8, 0.35) * grid_search_generic(x= c(1, 0), distr = 'bern', pars_df = data.frame(prob = c(0.1, 0.2)),
ws = 1)
pos_odds / sum(pos_odds)
install.packages("R2HTML")
tmpfic=HTMLInitFile(tempdir(),CSSFile="http://www.stat.ucl.ac.be/R2HTML/Pastel.css")
data(iris)
HTML(as.title("Fisher Iris dataset / Correlation matrix - normal matrix"),
file=tmpfic)
HTML(cor(iris[,1:4]), file=tmpfic)
HTML(as.title("Fisher Iris dataset / Correlation matrix - traffic highlighting"),
file=tmpfic)
HTML.cormat(cor(iris[,1:4]), file=tmpfic)
library(R2HTML)
tmpfic=HTMLInitFile(tempdir(),CSSFile="http://www.stat.ucl.ac.be/R2HTML/Pastel.css")
data(iris)
HTML(as.title("Fisher Iris dataset / Correlation matrix - normal matrix"),
file=tmpfic)
HTML(cor(iris[,1:4]), file=tmpfic)
HTML(as.title("Fisher Iris dataset / Correlation matrix - traffic highlighting"),
file=tmpfic)
HTML.cormat(cor(iris[,1:4]), file=tmpfic)
tmpfic
HTML(help('dbeta'), file = tmpfic)
library(rvest)
html(help('dbeta'))
as.data.frame(help('dbeta'))
print(help('dbeta'))
cat(help('dbeta'))
if (interactive()) {
ui <- fluidPage(
downloadLink("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(data, file)
}
)
}
shinyApp(ui, server)
}
library(shiny)
if (interactive()) {
ui <- fluidPage(
downloadLink("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(data, file)
}
)
}
shinyApp(ui, server)
}
install.packages("tidyquant")
install.packages(c("backports", "bayesplot", "BH", "brms", "checkmate", "cubature", "curl", "DBI", "devtools", "evaluate", "future", "GGally", "git2r", "globals", "gridExtra", "haven", "htmlwidgets", "httpuv", "jsonlite", "knitr", "modelr", "openssl", "plotly", "psych", "reshape", "rsconnect", "rstantools", "rstudioapi", "shiny", "shinyjs", "shinystan", "sp", "spdep", "threejs", "tibble", "tidyr"))
install.packages(c("backports", "bayesplot", "BH", "brms", "checkmate", "cubature", "curl", "DBI", "devtools", "evaluate", "future", "GGally", "git2r", "globals", "gridExtra", "haven", "htmlwidgets", "httpuv", "jsonlite", "knitr", "modelr", "openssl", "plotly", "psych", "reshape", "rsconnect", "rstantools", "rstudioapi", "shiny", "shinyjs", "shinystan", "sp", "spdep", "threejs", "tibble", "tidyr"))
install.packages(c("backports", "bayesplot", "BH", "brms", "checkmate", "cubature", "curl", "DBI", "devtools", "evaluate", "future", "GGally", "git2r", "globals", "gridExtra", "haven", "htmlwidgets", "httpuv", "jsonlite", "knitr", "modelr", "openssl", "plotly", "psych", "reshape", "rsconnect", "rstantools", "rstudioapi", "shiny", "shinyjs", "shinystan", "sp", "spdep", "threejs", "tibble", "tidyr"))
install.packages("tidyquant")
install.packages("jsonlite")
library(tidyquant)
tq_index()
tq_exchange()
?tq_index
tq_index_options()
library(tidyquant)
# Use FANG data set
data("FANG")
# Get AAPL and AMZN Stock Prices
AAPL <- tq_get("AAPL", get = "stock.prices", from = "2015-09-01", to = "2016-12-31")
AMZN <- tq_get("AMZN", get = "stock.prices", from = "2000-01-01", to = "2016-12-31")
end <- as_date("2016-12-31")
AAPL %>%
ggplot(aes(x = date, y = close)) +
geom_line() +
labs(title = "AAPL Line Chart", y = "Closing Price", x = "") +
theme_tq()
AAPL %>%
ggplot(aes(x = date, y = close)) +
geom_barchart(aes(open = open, high = high, low = low, close = close)) +
labs(title = "AAPL Bar Chart", y = "Closing Price", x = "") +
theme_tq()
AAPL %>%
ggplot(aes(x = date, y = close)) +
geom_barchart(aes(open = open, high = high, low = low, close = close)) +
labs(title = "AAPL Bar Chart",
subtitle = "Zoomed in using coord_x_date",
y = "Closing Price", x = "") +
coord_x_date(xlim = c(end - weeks(6), end),
ylim = c(100, 120)) +
theme_tq()
AAPL %>%
ggplot(aes(x = date, y = close)) +
geom_barchart(aes(open = open, high = high, low = low, close = close),
color_up = "darkgreen", color_down = "darkred", size = 1) +
labs(title = "AAPL Bar Chart",
subtitle = "Zoomed in, Experimenting with Formatting",
y = "Closing Price", x = "") +
coord_x_date(xlim = c(end - weeks(6), end),
ylim = c(100, 120)) +
theme_tq()
AAPL %>%
ggplot(aes(x = date, y = close)) +
geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
labs(title = "AAPL Candlestick Chart", y = "Closing Price", x = "") +
theme_tq()
AAPL %>%
ggplot(aes(x = date, y = close)) +
geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
labs(title = "AAPL Candlestick Chart",
subtitle = "Zoomed in using coord_x_date",
y = "Closing Price", x = "") +
coord_x_date(xlim = c(end - weeks(6), end),
ylim = c(100, 120)) +
theme_tq()
install.packages("installr")
library(installr)
updateR()
install.packages("blink")
library(blink)
data(RLdata500)
head(RLdata500)
# X.c contains the categorical variables
# X.s contains the string variables
# p.c is the number of categorical variables
# p.s contains the number of string variables
X.c <- RLdata500[c("by","bm","bd")]
X.c <- as.matrix(RLdata500[,"bd"],ncol=1)
p.c <- ncol(X.c)
X.s <- as.matrix(RLdata500[-c(2,4,7)])
p.s <- ncol(X.s)
p.s
as.matrix(RLdata500[-c(2,4,7)])
as.matrix(RLdata500[,"bd"],ncol=1)
ncol(X.c)
file.num <- rep(c(1,2,3),c(200,150,150))
a <-1
b <- 999
d <- function(string1,string2){adist(string1,string2)}
c <- 1
lam.gs <- rl.gibbs(file.num=file.num,X.s=X.s,X.c=X.c,num.gs=2,a=a,b=b,c=c,d=d, M=500)
lam.gs
estLink <- lam.gs
estPopSize <- apply(estLink , 1, function(x) {length(unique(x))})
plot(density(estPopSize),xlim=c(300,500),main="",lty=1, "Observed Population Size", ylim= c(0,1))
abline(v=450,col="red")
abline(v=mean(estPopSize),col="black",lty=2)
mean(estPopSize)
sd(estPopSize)
billboarder() %>%
bb_barchart(table(sample(letters[1:6], 50, TRUE))) %>%
bb_title(text = "My title", position = "center")
install.packages("billboarder")
library(billboarder)
billboarder() %>%
bb_barchart(table(sample(letters[1:6], 50, TRUE))) %>%
bb_title(text = "My title", position = "center")
data("prod_par_filiere")
prod_par_filiere[, c(1, 3, 4, 5, 6, 8)]
View(prod_par_filiere)
# Default
billboarder() %>%
bb_barchart(data = prod_par_filiere[, c(1, 3, 4, 5, 6, 8)])
?billboarder::bb_linechart
billboarder() %>%
bb_linechart(data = prod_par_filiere[, c(1, 3, 4, 5, 6, 8)])
?bb_linechart
billboarder() %>%
bb_linechart(data = prod_par_filiere[, c(3, 4, 5, 6, 8)])
# Default
billboarder() %>%
bb_barchart(data = prod_par_filiere[, c(1, 3, 4, 5, 6, 8)])
billboarder() %>%
bb_linechart(data = prod_par_filiere[, c(3, 4, 5, 6, 8)])
data("economics", package = "ggplot2")
billboarder() %>%
bb_linechart(data = economics[, c("date", "psavert")]) %>%
bb_x_axis(tick = list(format = "%Y-%m", fit = FALSE)) %>%
bb_y_axis(tick = list(format = suffix("%")),
label = list(text = "Personal savings rate")) %>%
bb_legend(show = FALSE) %>%
bb_x_grid(show = TRUE) %>%
bb_y_grid(show = TRUE) %>%
bb_subchart(show = TRUE)
View(prod_par_filiere)
billboarder() %>%
bb_linechart(data = prod_par_filiere[, c(1, 3, 4, 5, 6, 8)]) %>%
bb_x_axis(tick = list(format = "####", fit = FALSE))
billboarder() %>%
bb_linechart(data = prod_par_filiere[, c('annee', 3)]) %>%
bb_x_axis(tick = list(format = "####", fit = FALSE))
billboarder() %>%
bb_linechart(data = prod_par_filiere[, c(1, 3)])
billboarder() %>%
bb_linechart(data = prod_par_filiere[, c('annee', 'prod_therm')])
df <- data.frame(
cos = cos(seq(-pi, pi, length.out = 30))
)
# No legend
billboarder() %>%
bb_linechart(data = df) %>%
bb_legend(show = FALSE)
View(df)
df$sin <- sin(seq(-pi, pi, length.out = 30))
billboarder() %>%
bb_linechart(data = df) %>%
bb_legend(position = "right")
billboarder() %>%
bb_linechart(data = df) %>%
bb_legend(position = "right") %>%
bb_y_axis(tick = list(
values = seq(-pi, pi, length.out = 30),
outer = FALSE
)
)
billboarder() %>%
bb_linechart(data = df) %>%
bb_legend(position = "right") %>%
bb_x_axis(tick = list(
values = seq(-pi, pi, length.out = 30),
outer = FALSE
)
)
billboarder() %>%
bb_linechart(data = df) %>%
bb_legend(position = "right") %>%
bb_x_axis(tick = list(
values = seq(-pi, pi, length.out = 30),
outer = TRUE
)
)
?bb_x_axis
billboarder() %>%
bb_linechart(data = df) %>%
bb_legend(position = "right") %>%
bb_x_axis(tick = list(
label = seq(-pi, pi, length.out = 30),
outer = TRUE
)
)
stars <- data.frame(
package = c("billboarder", "ggiraph", "officer", "shinyWidgets", "visNetwork"),
stars = c(9, 178, 43, 46, 175)
)
# Add a label to y axis
billboarder() %>%
bb_barchart(data = stars) %>%
bb_axis(y = list(label = list(text = "# of stars", position = "middle")))
??bb_linechart
billboarder() %>%
bb_linechart(data = prod_par_filiere[, c('annee', 'prod_therm'), x="annee"]) %>%
bb_x_axis(tick = list(format = "####", fit = FALSE))
prod_par_filiere %>%
select(annee, prod_therm) %>%
mutate(annee = as.factor(annee)) %>%
billboarder() %>%
bb_linechart( x="annee")
library(billboarder)
library(dplyr)
prod_par_filiere %>%
select(annee, prod_therm) %>%
mutate(annee = as.factor(annee)) %>%
billboarder() %>%
bb_linechart( x="annee")
billboarder() %>%
bb_linechart(data = prod_par_filiere[, c(1, 3)], x="annee")
?bb_y_axis
billboarder() %>%
bb_linechart(data = prod_par_filiere[, c(1, 3)], x="annee") %>%
bb_y_axis(tick = list(start = 0, fit = FALSE))
billboarder() %>%
bb_linechart(data = prod_par_filiere[, c(1, 3)], x="annee") %>%
bb_y_axis(min = 0, tick = list(start = 0, fit = FALSE))
install.package("treemapify")
install.packages("treemapify")
G20
library(ggplot2)
library(treemapify)
G20
ggplot(G20, aes(area = gdp_mil_usd, fill = hdi)) +
geom_treemap()
ggplot(G20, aes(area = gdp_mil_usd, fill = hdi, label = country)) +
geom_treemap() +
geom_treemap_text(fontface = "italic", colour = "white", place = "centre",
grow = TRUE)
ggplot(G20, aes(area = gdp_mil_usd, fill = hdi, label = country,
subgroup = region)) +
geom_treemap() +
geom_treemap_subgroup_border() +
geom_treemap_subgroup_text(place = "centre", grow = T, alpha = 0.5, colour =
"black", fontface = "italic", min.size = 0) +
geom_treemap_text(colour = "white", place = "topleft", reflow = T)
ggplot(G20, aes(area = gdp_mil_usd, fill = region, label = country)) +
geom_treemap() +
geom_treemap_text(grow = T, reflow = T, colour = "black") +
facet_wrap( ~ econ_classification) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position = "bottom") +
labs(
title = "The G-20 major economies",
caption = "The area of each country is proportional to its relative GDP
within the economic group (advanced or developing)",
fill = "Region"
)
install.packages("tweenr")
devtools::install_github("dgrtwo/gganimate")
library(tweenr)
library(gganimate)
G20_alt <- G20
G20_alt$gdp_mil_usd <- sample(G20$gdp_mil_usd, nrow(G20))
G20_alt$hdi <- sample(G20$hdi, nrow(G20))
tweened <- tween_states(list(G20, G20_alt, G20), tweenlength = 8,
statelength = 5, ease = 'cubic-in-out', nframes = 31)
View(tweened)
View(G20_alt)
?tween_states
G20_alt <- G20
G20_alt$gdp_mil_usd <- sample(G20$gdp_mil_usd, nrow(G20))
G20_alt$hdi <- sample(G20$hdi, nrow(G20))
tweened <- tween_states(list(G20, G20_alt, G20), tweenlength = 8,
statelength = 5, ease = 'cubic-in-out', nframes = 31)
animated_plot <- ggplot(tweened, aes(area = gdp_mil_usd, fill = hdi,
label = country, subgroup = region,
frame = .frame)) +
geom_treemap(fixed = T) +
geom_treemap_subgroup_border(fixed = T) +
geom_treemap_subgroup_text(place = "centre", grow = T, alpha = 0.5,
colour = "black", fontface = "italic", min.size = 0,
fixed = T) +
geom_treemap_text(colour = "white", place = "topleft", reflow = T, fixed = T)
animated_plot
animation::ani.options(interval = 1/10)
gganimate(animated_plot, "man/figures/animated_treemap.gif", title_frame = F,
ani.width = 200, ani.height = 200)
library(ggplot2)
library(treemapify)
G20
library(tweenr)
library(gganimate)
G20_alt <- G20
G20_alt$gdp_mil_usd <- sample(G20$gdp_mil_usd, nrow(G20))
G20_alt$hdi <- sample(G20$hdi, nrow(G20))
tweened <- tween_states(list(G20, G20_alt, G20), tweenlength = 8,
statelength = 5, ease = 'cubic-in-out', nframes = 31)
animated_plot <- ggplot(tweened, aes(area = gdp_mil_usd, fill = hdi,
label = country, subgroup = region,
frame = .frame)) +
geom_treemap(fixed = T) +
geom_treemap_subgroup_border(fixed = T) +
geom_treemap_subgroup_text(place = "centre", grow = T, alpha = 0.5,
colour = "black", fontface = "italic", min.size = 0,
fixed = T) +
geom_treemap_text(colour = "white", place = "topleft", reflow = T, fixed = T)
animation::ani.options(interval = 1/10)
gganimate(animated_plot, "man/figures/animated_treemap.gif", title_frame = F,
ani.width = 200, ani.height = 200)
setwd("~/GitHub/new package play codes/visual/treemapify")
setwd("~/GitHub/new package play codes/visual/treemapify")
gganimate(animated_plot, "animated_treemap.gif", title_frame = F,
ani.width = 200, ani.height = 200)
gganimate(animated_plot, "animated_treemap.gif", title_frame = F,
ani.width = 200, ani.height = 200)
